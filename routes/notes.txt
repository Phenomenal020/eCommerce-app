{
  requestFiles: [Object: null prototype] {
    '': {
      name: 'girl-test.jpg',
      data: <Buffer >,
      size: 7103,
      encoding: '7bit',
      tempFilePath: 'C:\\Users\\BUSSDOR\\Stephen 22A\\projects\\mern-ecommerce\\tmp\\tmp-1-1653374588397',
      truncated: false,
      mimetype: 'image/jpeg',
      md5: '028fc4bc48ea2f738ea10966cfd848a0',
      mv: [Function: mv]
    }
  }



{
  req: <ref *1> IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [Array],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      constructed: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] { end: [Array], data: [Function: ondata] },
    _eventsCount: 2,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [ServerResponse],
      [Symbol(async_id_symbol)]: 196,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    rawHeaders: [
      'User-Agent',
      'PostmanRuntime/7.29.0',
      'Accept',
      '*/*',
      'Cache-Control',
      'no-cache',
      'Postman-Token',
      'db6d65bc-d6f8-483a-b598-596b5cefa9e3',
      'Host',
      'localhost:4000',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Connection',
      'keep-alive',
      'Content-Type',
      'multipart/form-data; boundary=--------------------------070675351964931430288945',
      'Content-Length',
      '168'
    ],
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/upload',
    method: 'POST',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [ServerResponse],
      [Symbol(async_id_symbol)]: 196,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _consuming: true,
    _dumped: false,
    next: [Function: next],
    baseUrl: '/api',
    originalUrl: '/api/upload',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/upload',
      path: '/upload',
      href: '/upload',
      _raw: '/upload'
    },
    params: {},
    query: {},
    res: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      socket: [Socket],
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *1],
      _sent100: false,
      _expect_continue: false,
      locals: [Object: null prototype] {},
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    body: {},
    secret: undefined,
    cookies: [Object: null prototype] {},
    signedCookies: [Object: null prototype] {},
    files: null,
    route: Route { path: '/upload', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false,
    [Symbol(kHeaders)]: {
      'user-agent': 'PostmanRuntime/7.29.0',
      accept: '*/*',
      'cache-control': 'no-cache',
      'postman-token': 'db6d65bc-d6f8-483a-b598-596b5cefa9e3',
      host: 'localhost:4000',
      'accept-encoding': 'gzip, deflate, br',
      connection: 'keep-alive',
      'content-type': 'multipart/form-data; boundary=--------------------------070675351964931430288945',
      'content-length': '168'
    },
    [Symbol(kHeadersCount)]: 18,
    [Symbol(kTrailers)]: null,
    [Symbol(kTrailersCount)]: 0,
    [Symbol(RequestTimeout)]: undefined
  }
}


const fileupload = require('express-fileupload'); 
app.use(fileupload({useTempFiles: true}))

{
    "public_id": "test/hu3k3mt7clcjvwalblbm",
    "url": "https://res.cloudinary.com/dzkhwrncu/image/upload/v1653924456/test/hu3k3mt7clcjvwalblbm.jpg"
}

{
    "product_id": "product001",
    "title": "Samsung A32",
    "price": 250,
    "description": "Sleek phone for sleek folks",
    "content": "6gb ram, 128gb rom, 5000mAh",
    "images": {
        "public_id": "test/hu3k3mt7clcjvwalblbm",
        "url": "https://res.cloudinary.com/dzkhwrncu/image/upload/v1653924456/test/hu3k3mt7clcjvwalblbm.jpg"
    },
    "category": "Smartphone"
}

  const oldProduct = await Products.findById(req.params.id)
  const { product_id, title, price, description, content, images, category } = req.body

  if (!images) { return res.status(400).json({ msg: "No image upload" }) }

  await Products.findOneAndUpdate({ _id: req.params.id }, { product_id, title, price, description, content, images, category })

  return res.status(200).json({ msg: "Product updated successfully" })